// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// cpp_slicemean_int
Rcpp::NumericVector cpp_slicemean_int(const arma::Cube<int>& x, bool na_rm, double mis_val);
RcppExport SEXP _cubeStats_cpp_slicemean_int(SEXP xSEXP, SEXP na_rmSEXP, SEXP mis_valSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::Cube<int>& >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    Rcpp::traits::input_parameter< double >::type mis_val(mis_valSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_slicemean_int(x, na_rm, mis_val));
    return rcpp_result_gen;
END_RCPP
}
// cpp_slicemean_num
Rcpp::NumericVector cpp_slicemean_num(const arma::Cube<double>& x, bool na_rm);
RcppExport SEXP _cubeStats_cpp_slicemean_num(SEXP xSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::Cube<double>& >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_slicemean_num(x, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// cpp_slicemax_int
Rcpp::NumericVector cpp_slicemax_int(const arma::Cube<int>& x, bool na_rm, double mis_val);
RcppExport SEXP _cubeStats_cpp_slicemax_int(SEXP xSEXP, SEXP na_rmSEXP, SEXP mis_valSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::Cube<int>& >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    Rcpp::traits::input_parameter< double >::type mis_val(mis_valSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_slicemax_int(x, na_rm, mis_val));
    return rcpp_result_gen;
END_RCPP
}
// cpp_slicemax_num
Rcpp::NumericVector cpp_slicemax_num(const arma::Cube<double>& x, bool na_rm);
RcppExport SEXP _cubeStats_cpp_slicemax_num(SEXP xSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::Cube<double>& >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_slicemax_num(x, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// cpp_slicemin_int
Rcpp::NumericVector cpp_slicemin_int(const arma::Cube<int>& x, bool na_rm, double mis_val);
RcppExport SEXP _cubeStats_cpp_slicemin_int(SEXP xSEXP, SEXP na_rmSEXP, SEXP mis_valSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::Cube<int>& >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    Rcpp::traits::input_parameter< double >::type mis_val(mis_valSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_slicemin_int(x, na_rm, mis_val));
    return rcpp_result_gen;
END_RCPP
}
// cpp_slicemin_num
Rcpp::NumericVector cpp_slicemin_num(const arma::Cube<double>& x, bool na_rm);
RcppExport SEXP _cubeStats_cpp_slicemin_num(SEXP xSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::Cube<double>& >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_slicemin_num(x, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// cpp_slicemedian_int
Rcpp::NumericVector cpp_slicemedian_int(const arma::Cube<int>& x, bool na_rm, double mis_val);
RcppExport SEXP _cubeStats_cpp_slicemedian_int(SEXP xSEXP, SEXP na_rmSEXP, SEXP mis_valSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::Cube<int>& >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    Rcpp::traits::input_parameter< double >::type mis_val(mis_valSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_slicemedian_int(x, na_rm, mis_val));
    return rcpp_result_gen;
END_RCPP
}
// cpp_slicemedian_num
Rcpp::NumericVector cpp_slicemedian_num(const arma::Cube<double>& x, bool na_rm);
RcppExport SEXP _cubeStats_cpp_slicemedian_num(SEXP xSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::Cube<double>& >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_slicemedian_num(x, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// cpp_slicesum_int
Rcpp::NumericVector cpp_slicesum_int(const arma::Cube<int>& x, bool na_rm, double mis_val);
RcppExport SEXP _cubeStats_cpp_slicesum_int(SEXP xSEXP, SEXP na_rmSEXP, SEXP mis_valSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::Cube<int>& >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    Rcpp::traits::input_parameter< double >::type mis_val(mis_valSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_slicesum_int(x, na_rm, mis_val));
    return rcpp_result_gen;
END_RCPP
}
// cpp_slicesum_num
Rcpp::NumericVector cpp_slicesum_num(const arma::Cube<double>& x, bool na_rm);
RcppExport SEXP _cubeStats_cpp_slicesum_num(SEXP xSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::Cube<double>& >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_slicesum_num(x, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// cpp_slicesd_int
Rcpp::NumericVector cpp_slicesd_int(const arma::Cube<int>& x, bool na_rm, double mis_val);
RcppExport SEXP _cubeStats_cpp_slicesd_int(SEXP xSEXP, SEXP na_rmSEXP, SEXP mis_valSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::Cube<int>& >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    Rcpp::traits::input_parameter< double >::type mis_val(mis_valSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_slicesd_int(x, na_rm, mis_val));
    return rcpp_result_gen;
END_RCPP
}
// cpp_slicesd_num
Rcpp::NumericVector cpp_slicesd_num(const arma::Cube<double>& x, bool na_rm);
RcppExport SEXP _cubeStats_cpp_slicesd_num(SEXP xSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::Cube<double>& >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_slicesd_num(x, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// cpp_test
Rcpp::NumericVector cpp_test(const arma::Cube<double>& x);
RcppExport SEXP _cubeStats_cpp_test(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::Cube<double>& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_test(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_slicegreater_int
Rcpp::NumericVector cpp_slicegreater_int(const arma::Cube<int>& x, bool na_rm, double value, double mis_val);
RcppExport SEXP _cubeStats_cpp_slicegreater_int(SEXP xSEXP, SEXP na_rmSEXP, SEXP valueSEXP, SEXP mis_valSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::Cube<int>& >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    Rcpp::traits::input_parameter< double >::type mis_val(mis_valSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_slicegreater_int(x, na_rm, value, mis_val));
    return rcpp_result_gen;
END_RCPP
}
// cpp_slicegreater_num
Rcpp::NumericVector cpp_slicegreater_num(const arma::Cube<double>& x, bool na_rm, double value);
RcppExport SEXP _cubeStats_cpp_slicegreater_num(SEXP xSEXP, SEXP na_rmSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::Cube<double>& >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_slicegreater_num(x, na_rm, value));
    return rcpp_result_gen;
END_RCPP
}
// cpp_sliceless_int
Rcpp::NumericVector cpp_sliceless_int(const arma::Cube<int>& x, bool na_rm, double value, double mis_val);
RcppExport SEXP _cubeStats_cpp_sliceless_int(SEXP xSEXP, SEXP na_rmSEXP, SEXP valueSEXP, SEXP mis_valSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::Cube<int>& >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    Rcpp::traits::input_parameter< double >::type mis_val(mis_valSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_sliceless_int(x, na_rm, value, mis_val));
    return rcpp_result_gen;
END_RCPP
}
// cpp_sliceless_num
Rcpp::NumericVector cpp_sliceless_num(const arma::Cube<double>& x, bool na_rm, double value);
RcppExport SEXP _cubeStats_cpp_sliceless_num(SEXP xSEXP, SEXP na_rmSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::Cube<double>& >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_sliceless_num(x, na_rm, value));
    return rcpp_result_gen;
END_RCPP
}
// cpp_slicerange_int
Rcpp::NumericVector cpp_slicerange_int(const arma::Cube<int>& x, bool na_rm, double value1, double value2, double mis_val);
RcppExport SEXP _cubeStats_cpp_slicerange_int(SEXP xSEXP, SEXP na_rmSEXP, SEXP value1SEXP, SEXP value2SEXP, SEXP mis_valSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::Cube<int>& >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    Rcpp::traits::input_parameter< double >::type value1(value1SEXP);
    Rcpp::traits::input_parameter< double >::type value2(value2SEXP);
    Rcpp::traits::input_parameter< double >::type mis_val(mis_valSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_slicerange_int(x, na_rm, value1, value2, mis_val));
    return rcpp_result_gen;
END_RCPP
}
// cpp_slicerange_num
Rcpp::NumericVector cpp_slicerange_num(const arma::Cube<double>& x, bool na_rm, double value1, double value2);
RcppExport SEXP _cubeStats_cpp_slicerange_num(SEXP xSEXP, SEXP na_rmSEXP, SEXP value1SEXP, SEXP value2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::Cube<double>& >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    Rcpp::traits::input_parameter< double >::type value1(value1SEXP);
    Rcpp::traits::input_parameter< double >::type value2(value2SEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_slicerange_num(x, na_rm, value1, value2));
    return rcpp_result_gen;
END_RCPP
}
// cpp_sliceequal_int
Rcpp::NumericVector cpp_sliceequal_int(const arma::Cube<int>& x, bool na_rm, double value, double mis_val);
RcppExport SEXP _cubeStats_cpp_sliceequal_int(SEXP xSEXP, SEXP na_rmSEXP, SEXP valueSEXP, SEXP mis_valSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::Cube<int>& >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    Rcpp::traits::input_parameter< double >::type mis_val(mis_valSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_sliceequal_int(x, na_rm, value, mis_val));
    return rcpp_result_gen;
END_RCPP
}
// cpp_sliceequal_num
Rcpp::NumericVector cpp_sliceequal_num(const arma::Cube<double>& x, bool na_rm, double value);
RcppExport SEXP _cubeStats_cpp_sliceequal_num(SEXP xSEXP, SEXP na_rmSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::Cube<double>& >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_sliceequal_num(x, na_rm, value));
    return rcpp_result_gen;
END_RCPP
}
// cpp_slicefinite_num
Rcpp::NumericVector cpp_slicefinite_num(const arma::Cube<double>& x);
RcppExport SEXP _cubeStats_cpp_slicefinite_num(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::Cube<double>& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_slicefinite_num(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_slicefinite_int
Rcpp::NumericVector cpp_slicefinite_int(const arma::Cube<int>& x, double mis_val);
RcppExport SEXP _cubeStats_cpp_slicefinite_int(SEXP xSEXP, SEXP mis_valSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::Cube<int>& >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type mis_val(mis_valSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_slicefinite_int(x, mis_val));
    return rcpp_result_gen;
END_RCPP
}
// cpp_slicena_num
Rcpp::NumericVector cpp_slicena_num(const arma::Cube<double>& x);
RcppExport SEXP _cubeStats_cpp_slicena_num(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::Cube<double>& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_slicena_num(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_slicena_int
Rcpp::NumericVector cpp_slicena_int(const arma::Cube<int>& x, double mis_val);
RcppExport SEXP _cubeStats_cpp_slicena_int(SEXP xSEXP, SEXP mis_valSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::Cube<int>& >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type mis_val(mis_valSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_slicena_int(x, mis_val));
    return rcpp_result_gen;
END_RCPP
}
// test_int
Rcpp::NumericVector test_int(const arma::Cube<int>& x, double mis_val);
RcppExport SEXP _cubeStats_test_int(SEXP xSEXP, SEXP mis_valSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::Cube<int>& >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type mis_val(mis_valSEXP);
    rcpp_result_gen = Rcpp::wrap(test_int(x, mis_val));
    return rcpp_result_gen;
END_RCPP
}
// test_int2
Rcpp::NumericVector test_int2(const arma::Cube<int>& x, double mis_val);
RcppExport SEXP _cubeStats_test_int2(SEXP xSEXP, SEXP mis_valSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::Cube<int>& >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type mis_val(mis_valSEXP);
    rcpp_result_gen = Rcpp::wrap(test_int2(x, mis_val));
    return rcpp_result_gen;
END_RCPP
}
// cpp_tubemean_int
Rcpp::NumericVector cpp_tubemean_int(const arma::Cube<int>& x, bool na_rm, double mis_val);
RcppExport SEXP _cubeStats_cpp_tubemean_int(SEXP xSEXP, SEXP na_rmSEXP, SEXP mis_valSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::Cube<int>& >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    Rcpp::traits::input_parameter< double >::type mis_val(mis_valSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_tubemean_int(x, na_rm, mis_val));
    return rcpp_result_gen;
END_RCPP
}
// cpp_tubemean_num
Rcpp::NumericVector cpp_tubemean_num(const arma::Cube<double>& x, bool na_rm);
RcppExport SEXP _cubeStats_cpp_tubemean_num(SEXP xSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::Cube<double>& >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_tubemean_num(x, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// cpp_tubemax_int
Rcpp::NumericVector cpp_tubemax_int(const arma::Cube<int>& x, bool na_rm, double mis_val);
RcppExport SEXP _cubeStats_cpp_tubemax_int(SEXP xSEXP, SEXP na_rmSEXP, SEXP mis_valSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::Cube<int>& >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    Rcpp::traits::input_parameter< double >::type mis_val(mis_valSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_tubemax_int(x, na_rm, mis_val));
    return rcpp_result_gen;
END_RCPP
}
// cpp_tubemax_num
Rcpp::NumericVector cpp_tubemax_num(const arma::Cube<double>& x, bool na_rm);
RcppExport SEXP _cubeStats_cpp_tubemax_num(SEXP xSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::Cube<double>& >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_tubemax_num(x, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// cpp_tubemin_int
Rcpp::NumericVector cpp_tubemin_int(const arma::Cube<int>& x, bool na_rm, double mis_val);
RcppExport SEXP _cubeStats_cpp_tubemin_int(SEXP xSEXP, SEXP na_rmSEXP, SEXP mis_valSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::Cube<int>& >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    Rcpp::traits::input_parameter< double >::type mis_val(mis_valSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_tubemin_int(x, na_rm, mis_val));
    return rcpp_result_gen;
END_RCPP
}
// cpp_tubemin_num
Rcpp::NumericVector cpp_tubemin_num(const arma::Cube<double>& x, bool na_rm);
RcppExport SEXP _cubeStats_cpp_tubemin_num(SEXP xSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::Cube<double>& >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_tubemin_num(x, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// cpp_tubemean_int2
Rcpp::NumericVector cpp_tubemean_int2(const arma::Cube<int>& x, double mis_val);
RcppExport SEXP _cubeStats_cpp_tubemean_int2(SEXP xSEXP, SEXP mis_valSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::Cube<int>& >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type mis_val(mis_valSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_tubemean_int2(x, mis_val));
    return rcpp_result_gen;
END_RCPP
}
// cpp_tubemean_num2
Rcpp::NumericVector cpp_tubemean_num2(const arma::Cube<double>& x, bool na_rm);
RcppExport SEXP _cubeStats_cpp_tubemean_num2(SEXP xSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::Cube<double>& >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_tubemean_num2(x, na_rm));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_cubeStats_cpp_slicemean_int", (DL_FUNC) &_cubeStats_cpp_slicemean_int, 3},
    {"_cubeStats_cpp_slicemean_num", (DL_FUNC) &_cubeStats_cpp_slicemean_num, 2},
    {"_cubeStats_cpp_slicemax_int", (DL_FUNC) &_cubeStats_cpp_slicemax_int, 3},
    {"_cubeStats_cpp_slicemax_num", (DL_FUNC) &_cubeStats_cpp_slicemax_num, 2},
    {"_cubeStats_cpp_slicemin_int", (DL_FUNC) &_cubeStats_cpp_slicemin_int, 3},
    {"_cubeStats_cpp_slicemin_num", (DL_FUNC) &_cubeStats_cpp_slicemin_num, 2},
    {"_cubeStats_cpp_slicemedian_int", (DL_FUNC) &_cubeStats_cpp_slicemedian_int, 3},
    {"_cubeStats_cpp_slicemedian_num", (DL_FUNC) &_cubeStats_cpp_slicemedian_num, 2},
    {"_cubeStats_cpp_slicesum_int", (DL_FUNC) &_cubeStats_cpp_slicesum_int, 3},
    {"_cubeStats_cpp_slicesum_num", (DL_FUNC) &_cubeStats_cpp_slicesum_num, 2},
    {"_cubeStats_cpp_slicesd_int", (DL_FUNC) &_cubeStats_cpp_slicesd_int, 3},
    {"_cubeStats_cpp_slicesd_num", (DL_FUNC) &_cubeStats_cpp_slicesd_num, 2},
    {"_cubeStats_cpp_test", (DL_FUNC) &_cubeStats_cpp_test, 1},
    {"_cubeStats_cpp_slicegreater_int", (DL_FUNC) &_cubeStats_cpp_slicegreater_int, 4},
    {"_cubeStats_cpp_slicegreater_num", (DL_FUNC) &_cubeStats_cpp_slicegreater_num, 3},
    {"_cubeStats_cpp_sliceless_int", (DL_FUNC) &_cubeStats_cpp_sliceless_int, 4},
    {"_cubeStats_cpp_sliceless_num", (DL_FUNC) &_cubeStats_cpp_sliceless_num, 3},
    {"_cubeStats_cpp_slicerange_int", (DL_FUNC) &_cubeStats_cpp_slicerange_int, 5},
    {"_cubeStats_cpp_slicerange_num", (DL_FUNC) &_cubeStats_cpp_slicerange_num, 4},
    {"_cubeStats_cpp_sliceequal_int", (DL_FUNC) &_cubeStats_cpp_sliceequal_int, 4},
    {"_cubeStats_cpp_sliceequal_num", (DL_FUNC) &_cubeStats_cpp_sliceequal_num, 3},
    {"_cubeStats_cpp_slicefinite_num", (DL_FUNC) &_cubeStats_cpp_slicefinite_num, 1},
    {"_cubeStats_cpp_slicefinite_int", (DL_FUNC) &_cubeStats_cpp_slicefinite_int, 2},
    {"_cubeStats_cpp_slicena_num", (DL_FUNC) &_cubeStats_cpp_slicena_num, 1},
    {"_cubeStats_cpp_slicena_int", (DL_FUNC) &_cubeStats_cpp_slicena_int, 2},
    {"_cubeStats_test_int", (DL_FUNC) &_cubeStats_test_int, 2},
    {"_cubeStats_test_int2", (DL_FUNC) &_cubeStats_test_int2, 2},
    {"_cubeStats_cpp_tubemean_int", (DL_FUNC) &_cubeStats_cpp_tubemean_int, 3},
    {"_cubeStats_cpp_tubemean_num", (DL_FUNC) &_cubeStats_cpp_tubemean_num, 2},
    {"_cubeStats_cpp_tubemax_int", (DL_FUNC) &_cubeStats_cpp_tubemax_int, 3},
    {"_cubeStats_cpp_tubemax_num", (DL_FUNC) &_cubeStats_cpp_tubemax_num, 2},
    {"_cubeStats_cpp_tubemin_int", (DL_FUNC) &_cubeStats_cpp_tubemin_int, 3},
    {"_cubeStats_cpp_tubemin_num", (DL_FUNC) &_cubeStats_cpp_tubemin_num, 2},
    {"_cubeStats_cpp_tubemean_int2", (DL_FUNC) &_cubeStats_cpp_tubemean_int2, 2},
    {"_cubeStats_cpp_tubemean_num2", (DL_FUNC) &_cubeStats_cpp_tubemean_num2, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_cubeStats(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
